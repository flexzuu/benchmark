/*
 * Post Service
 *
 * a post service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strconv"

	"github.com/flexzuu/benchmark/micro-service/rest/post/repo/entity"
	"github.com/gin-gonic/gin"
)

// CreatePost - Create post
func CreatePost(c *gin.Context) {
	var create CreatePostModel
	if err := c.ShouldBindJSON(&create); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	post, err := postRepo.Create(create.AuthorId, create.Headline, create.Content)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, PostModel{
		Id:       post.ID,
		AuthorId: post.AuthorID,
		Headline: post.Headline,
		Content:  post.Content,
	})
}

// DeletePost - Delete post
func DeletePost(c *gin.Context) {
	postId, err := strconv.ParseInt(c.Param("id"), 10, 0)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	err = postRepo.Delete(postId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{})
}

// GetPostById - Get post by id
func GetPostById(c *gin.Context) {
	postId, err := strconv.ParseInt(c.Param("id"), 10, 0)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	post, err := postRepo.GetById(postId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, PostModel{
		Id:       post.ID,
		AuthorId: post.AuthorID,
		Headline: post.Headline,
		Content:  post.Content,
	})
}

// ListPosts - List posts
func ListPosts(c *gin.Context) {
	var res []entity.Post

	authorId, err := strconv.ParseInt(c.Query("authorId"), 10, 0)
	if err != nil {
		res, err = postRepo.List()
	} else {
		res, err = postRepo.ListOfAuthor(authorId)
	}
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	posts := make([]PostModel, len(res))
	for i, p := range res {
		posts[i] = PostModel{
			Id:       p.ID,
			AuthorId: p.AuthorID,
			Headline: p.Headline,
			Content:  p.Content,
		}
	}

	c.JSON(http.StatusOK, PostListModel{
		posts,
	})
	return
}
