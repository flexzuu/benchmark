/*
 * Rating Service
 *
 * a rating service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"strconv"

	"github.com/flexzuu/benchmark/micro-service/rest/rating/repo/entity"
	"github.com/gin-gonic/gin"
)

// CreateRating - Create rating
func CreateRating(c *gin.Context) {
	ctx := context.Background()
	var create CreateRatingModel
	if err := c.ShouldBindJSON(&create); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	//check postId
	_, _, err := postServiceClient.PostApi.GetPostById(ctx, create.PostId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	rating, err := ratingRepo.Create(create.PostId, create.Rating)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, RatingModel{
		Id:     rating.ID,
		PostId: rating.PostID,
		Value:  rating.Value,
	})
}

// DeleteRating - Delete rating
func DeleteRating(c *gin.Context) {
	ratingID, err := strconv.ParseInt(c.Param("id"), 10, 0)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	err = ratingRepo.Delete(ratingID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{})
}

// GetRatingById - Get rating by id
func GetRatingById(c *gin.Context) {
	ratingID, err := strconv.ParseInt(c.Param("id"), 10, 0)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	rating, err := ratingRepo.GetById(ratingID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, RatingModel{
		Id:     rating.ID,
		PostId: rating.PostID,
		Value:  rating.Value,
	})
}

// ListRatings - List ratings
func ListRatings(c *gin.Context) {
	var res []entity.Rating
	ctx := context.Background()

	postID, err := strconv.ParseInt(c.Query("postId"), 10, 0)

	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	//check postId
	_, _, err = postServiceClient.PostApi.GetPostById(ctx, postID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	res, err = ratingRepo.ListOfPost(postID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ratings := make([]RatingModel, len(res))
	for i, r := range res {
		ratings[i] = RatingModel{
			Id:     r.ID,
			PostId: r.PostID,
			Value:  r.Value,
		}
	}

	c.JSON(http.StatusOK, RatingListModel{
		ratings,
	})
	return
}
